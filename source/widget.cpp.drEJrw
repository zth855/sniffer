#include "widget.h"
#include "ui_widget.h"

std::vector<int> total_length;
int reassemble_packet_length;

static char *protocol_type;
static std::vector<char*> Protocol_Type;
static std::vector<std::vector<u_char>> Packets;

static std::vector<QString> source_mac;
static std::vector<QString> destination_mac;
static std::vector<int> typeof_ether;

static std::vector<int> ip_version;
std::vector<int> ip_header_length;
static std::vector<int> typeof_service;
static std::vector<int> ip_total_length;
static std::vector<int> ip_id;
static std::vector<int> ip_MF;
static std::vector<int> ip_DF;
static std::vector<unsigned int> iP_fragment_offset;
static std::vector<int> ip_ttl;
static std::vector<int> ip_protocol;


static std::vector<int> source_port;
static std::vector<int> destination_port;
static std::vector<int> udp_length;
static std::vector<int> udp_checksum;

static std::vector<long long int> sequence_number;
static std::vector<long long int> acknowledge_number;
static std::vector<int> data_offset;
static std::vector<int> Reserved;
static std::vector<char*> flags;
static std::vector<int> window_size;
static std::vector<unsigned int> tcp_checksum;
static std::vector<int> urgent_point;

static std::vector<int> typeof_icmp;
static std::vector<int> codeof_icmp;
static std::vector<int> icmp_checksum;
static std::vector<int> sequence_number_icmp;

static std::vector<int> typeof_hardware;
static std::vector<int> typeof_protosol;
static std::vector<int> hardware_address_length;
static std::vector<int> protosol_address_length;
static std::vector<int> opcode;
static std::vector<char*> type;



std::vector<int> number_of_same_id_packets;
QString final_reassembled_packet;


QString formatPacket(const std::vector<u_char> &packet) {
    QString str;
    QTextStream stream(&str);
    int lineNumber = 0;
    for (int i = 0; i < packet.size(); ++i) {
        if(i % 16 == 0) {
            stream << QString::number(lineNumber, 16).rightJustified(4, '0') << ":  ";
            ++lineNumber;
        }
        stream << QString::number(packet[i], 16).rightJustified(2, '0') << "  ";
        if ((i + 1) % 16 == 0) {
            stream << "\n";
        }
    }
    if (packet.size() % 16 != 0) {
        stream << "\n";
    }
    return str;
}





Widget::Widget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::Widget)
{
    ui->setupUi(this);
    connect(ui->basic_information, &QTreeWidget::itemClicked, this, &Widget::onBasicInfoItemClicked);
    pcap_if_t *alldevs;
    char errbuf[PCAP_ERRBUF_SIZE];
    if(pcap_findalldevs(&alldevs, errbuf) == -1)
    {
        fprintf(stderr,"Couldn't find default device: %s\n", errbuf);
        return;
    }

    for(pcap_if_t *d=alldevs; d; d=d->next)
    {
        ui->choose_device->addItem(d->name);
    }

    pcap_freealldevs(alldevs);
}

Widget::~Widget()
{
    delete ui;
}

void Widget::onBasicInfoItemClicked(QTreeWidgetItem *item)
{

    std::stringstream ss;
    int row = ui->basic_information->indexOfTopLevelItem(item);


    const std::vector<u_char> &Packet = Packets[row];
    QString str = formatPacket(Packet);

    ui->show_packet->setReadOnly(true);
    ui->show_packet->setText(QString(str));


    // 创建新的模型
    QStandardItemModel *model = new QStandardItemModel(ui->specific_information);

    // 创建第一级的项
    QStandardItem *item1 = new QStandardItem(QString("Packet %1").arg(item->text(0)));
    model->appendRow(item1);

    // 创建第二级的项
    QStandardItem *item2_1 = new QStandardItem("Data Link Layer");
    QStandardItem *item2_2 = new QStandardItem("IPv4 Protocol Header Layer");
    QStandardItem *item2_3 = new QStandardItem("Specific Protocol Header Layer");
    item1->appendRow(item2_1);
    item1->appendRow(item2_2);
    item1->appendRow(item2_3);

    // 添加每个包的信息
    item2_1->appendRow(new QStandardItem("Source MAC: "+source_mac[row]));
    item2_1->appendRow(new QStandardItem("Destination MAC: "+destination_mac[row]));

    ss << "0x" << std::setfill('0') << std::setw(4) << std::uppercase << std::hex << typeof_ether[row];
    item2_1->appendRow(new QStandardItem(QString::fromStdString("Type pf Ether: "+ss.str())));


    item2_2->appendRow(new QStandardItem(QString::fromStdString("IP Version: " +std::to_string(ip_version[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("IP Header Length: " +std::to_string(ip_header_length[row])+" * 4 bytes")));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("Type of Service: " +std::to_string(typeof_service[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("IP Total Length: " +std::to_string(ip_total_length[row])+" bytes")));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("IP ID: " +std::to_string(ip_id[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("MF: " +std::to_string(ip_MF[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("DF: " +std::to_string(ip_DF[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("Fragment Offset: " +std::to_string(iP_fragment_offset[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("TTL: " +std::to_string(ip_ttl[row]))));
    item2_2->appendRow(new QStandardItem(QString::fromStdString("IP Protocol: " +std::to_string(ip_protocol[row]))));


    if(Protocol_Type[row]=="TCP"){
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Source Port: " +std::to_string(source_port[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Destination Port: " +std::to_string(destination_port[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Sequence Number: " +std::to_string(sequence_number[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Acknowledge Number: " +std::to_string(acknowledge_number[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Data Offset: " +std::to_string(data_offset[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Reserved: " +std::to_string(Reserved[row]))));
        item2_3->appendRow(new QStandardItem(QString("Flags: ") + QString(flags[row])));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Window Size: " +std::to_string(window_size[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Checksum: " +std::to_string(tcp_checksum[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Urgent Point: " +std::to_string(urgent_point[row]))));

    }
    else if(Protocol_Type[row]=="UDP"){
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Source Port: " +std::to_string(source_port[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Destination Port: " +std::to_string(destination_port[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("UDP Length: " +std::to_string(udp_length[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("UDP Checksum: " +std::to_string(udp_checksum[row]))));
    }
    else if(Protocol_Type[row]=="ICMP"){
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Type of ICMP: " +std::to_string(typeof_icmp[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Code of ICMP: " +std::to_string(codeof_icmp[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("ICMP Checksum: " +std::to_string(icmp_checksum[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Sequence Number: " +std::to_string(sequence_number_icmp[row]))));
    }
    else if(Protocol_Type[row]=="ARP"){
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Type of Hardware: " +std::to_string(typeof_hardware[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Type of Protosol: " +std::to_string(typeof_protosol[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Hardware Address Length: " +std::to_string(hardware_address_length[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Protosol Address Length: " +std::to_string(protosol_address_length[row]))));
        item2_3->appendRow(new QStandardItem(QString::fromStdString("Opcode: " +std::to_string(opcode[row]))));
        item2_3->appendRow(new QStandardItem(QString("Type: ") + QString(type[row])));
    }
    else if(Protocol_Type[row]=="OTHER"){
        item2_3->appendRow(new QStandardItem("UNKOWN"));

    }

    // 将模型设置到视图
    ui->specific_information->setModel(model);
    ui->specific_information->expandAll(); // 展开所有项


}


void Widget::onAddPacketInfo(int number, const QString &timeInfo, int length, const QString &protocolType, const QString &srcMac, const QString &dstMac, const QString &srcIp, const QString &dstIp)
{
    if(protocolType!="OTHER"){
        QTreeWidgetItem *item = new QTreeWidgetItem(ui->basic_information);
        item->setText(0, QString::number(number));
        item->setText(1, timeInfo);
        item->setText(2, QString::number(length));
        item->setText(3, protocolType);
        item->setText(4, srcMac);
        item->setText(5, dstMac);
        item->setText(6, srcIp);
        item->setText(7, dstIp);
    }

    else{
        QTreeWidgetItem *item = new QTreeWidgetItem(ui->basic_information);
        item->setText(0, QString::number(number));
        item->setText(1, "UNKONWN");
        item->setText(2, "UNKONWN");
        item->setText(3, protocolType);
        item->setText(4, "UNKONWN");
        item->setText(5, "UNKONWN");
        item->setText(6, "UNKONWN");
        item->setText(7, "UNKONWN");
    }




}


void PacketCaptureThread:: packet_handler(u_char *user_data, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    static int number = 0;
    QString timeStr = NULL;
    int length;
    QString protocolType = NULL;
    QString srcMac = NULL;
    QString dstMac = NULL;
    QString srcIp = NULL;
    QString dstIp = NULL;

    PacketCaptureThread *thread = reinterpret_cast<PacketCaptureThread*>(user_data);
    char src_ip[INET_ADDRSTRLEN];
    char dst_ip[INET_ADDRSTRLEN];
    struct ether_header *eth_header;
    struct ip* ip_packet = NULL;
    eth_header = (struct ether_header *) packet;


    struct arp_header {
        unsigned short arp_hardware_type;
        unsigned short arp_protocol_type;
        unsigned char arp_hardware_len;
        unsigned char arp_protocol_len;
        unsigned short arp_opcode;
        unsigned char arp_sender_mac[6];
        unsigned char arp_sender_ip[4];
        unsigned char arp_target_mac[6];
        unsigned char arp_target_ip[4];
    };

    switch (ntohs(eth_header->ether_type)) {
    case ETHERTYPE_IP:
    {
        ip_packet = (struct ip *)(packet + ETHER_HDR_LEN);
        inet_ntop(AF_INET, &(ip_packet->ip_src), src_ip, INET_ADDRSTRLEN);
        inet_ntop(AF_INET, &(ip_packet->ip_dst), dst_ip, INET_ADDRSTRLEN);
        srcIp = QString::fromUtf8(src_ip);
        dstIp = QString::fromUtf8(dst_ip);

        ip_version.push_back(ip_packet->ip_v);
        ip_header_length.push_back(ip_packet->ip_hl);
        typeof_service.push_back(ip_packet->ip_tos);
        ip_total_length.push_back(ntohs(ip_packet->ip_len));
        ip_id.push_back(ip_packet->ip_id);
        ip_MF.push_back((ntohs(ip_packet->ip_off) >> 13) & 0x1);
        ip_DF.push_back(((ntohs(ip_packet->ip_off) >> 13) & 0x2) >> 1);
        iP_fragment_offset.push_back(ntohs(ip_packet->ip_off) & 0x1FFF);
        ip_ttl.push_back(ip_packet->ip_ttl);
        ip_protocol.push_back(ip_packet->ip_p);



        switch (ip_packet->ip_p) {
        case IPPROTO_TCP:
            protocol_type = "TCP";
            break;
        case IPPROTO_UDP:
            protocol_type = "UDP";
            break;
        case IPPROTO_ICMP:
            protocol_type = "ICMP";
            break;
        default:
            protocol_type = "OTHER";
            ip_version.push_back(-1);
            ip_header_length.push_back(-1);
            typeof_service.push_back(-1);
            ip_total_length.push_back(-1);
            ip_id.push_back(-1);
            ip_MF.push_back(-1);
            ip_DF.push_back(-1);
            iP_fragment_offset.push_back(-1);
            ip_ttl.push_back(-1);
            ip_protocol.push_back(-1);
        }

    }
        break;
    case ETHERTYPE_ARP:
    {



        protocol_type = "ARP";

        struct ether_arp *arp_header = (struct ether_arp *)(packet + ETHER_HDR_LEN);

        char src_ip[INET_ADDRSTRLEN];
        char dst_ip[INET_ADDRSTRLEN];

        inet_ntop(AF_INET, arp_header->arp_spa, src_ip, INET_ADDRSTRLEN);
        inet_ntop(AF_INET, arp_header->arp_tpa, dst_ip, INET_ADDRSTRLEN);

        srcIp = src_ip;
        dstIp = dst_ip;

        char src_mac[ETH_ALEN*3]; // MAC地址长度为6个字节，每个字节使用两个字符表示，再加上5个冒号和结束符'\0'，总共需要18个字符
        char dst_mac[ETH_ALEN*3];

        snprintf(src_mac, sizeof(src_mac), "%02x:%02x:%02x:%02x:%02x:%02x",
                 arp_header->arp_sha[0],
                 arp_header->arp_sha[1],
                 arp_header->arp_sha[2],
                 arp_header->arp_sha[3],
                 arp_header->arp_sha[4],
                 arp_header->arp_sha[5]);

        snprintf(dst_mac, sizeof(dst_mac), "%02x:%02x:%02x:%02x:%02x:%02x",
                 arp_header->arp_tha[0],
                 arp_header->arp_tha[1],
                 arp_header->arp_tha[2],
                 arp_header->arp_tha[3],
                 arp_header->arp_tha[4],
                 arp_header->arp_tha[5]);

        srcMac = src_mac;
        dstMac = dst_mac;



        // 报文长度为以太网头部长度（14字节）加ARP报文长度（28字节）
        length = ETHER_HDR_LEN + sizeof(struct ether_arp);

        // 获取当前时间字符串
        time_t rawtime;
        struct tm * timeinfo;
        char buffer[80];
        time (&rawtime);
        timeinfo = localtime(&rawtime);
        strftime(buffer, sizeof(buffer), "%d-%m-%Y %H:%M:%S", timeinfo);
        timeStr = buffer;


        ip_version.push_back(-1);
        ip_header_length.push_back(-1);
        typeof_service.push_back(-1);
        ip_total_length.push_back(-1);
        ip_id.push_back(-1);
        ip_MF.push_back(-1);
        ip_DF.push_back(-1);
        iP_fragment_offset.push_back(-1);
        ip_ttl.push_back(-1);
        ip_protocol.push_back(-1);

    }
    break;
    default:
        protocol_type = "OTHER";
        ip_version.push_back(-1);
        ip_header_length.push_back(-1);
        typeof_service.push_back(-1);
        ip_total_length.push_back(-1);
        ip_id.push_back(-1);
        ip_MF.push_back(-1);
        ip_DF.push_back(-1);
        iP_fragment_offset.push_back(-1);
        ip_ttl.push_back(-1);
        ip_protocol.push_back(-1);

    }

    Protocol_Type.push_back(protocol_type);



    time_t rawTime = pkthdr->ts.tv_sec;
    char *timeCStr = ctime(&rawTime);
    timeStr = QString::fromLocal8Bit(timeCStr).trimmed();//
    length = pkthdr->len;//
    protocolType = QString::fromUtf8(protocol_type);//
    const char *srcMacStr = ether_ntoa((struct ether_addr*)eth_header->ether_shost);//
    srcMac = QString::fromUtf8(srcMacStr);
    const char *dstMacStr = ether_ntoa((struct ether_addr*)eth_header->ether_dhost);//
    dstMac = QString::fromUtf8(dstMacStr);



    source_mac.push_back(srcMac);
    destination_mac.push_back(dstMac);
    typeof_ether.push_back(ntohs(eth_header->ether_type));




    if(protocol_type=="UDP"){
        struct udphdr* udp_header = (struct udphdr*)(packet + ETHER_HDR_LEN + ip_packet->ip_hl * 4);
        source_port.push_back(ntohs(udp_header->uh_sport));
        destination_port.push_back(ntohs(udp_header->uh_dport));
        udp_length.push_back(ntohs(udp_header->uh_ulen));
        udp_checksum.push_back(ntohs(udp_header->uh_sum));


        sequence_number.push_back(-1);
        acknowledge_number.push_back(-1);
        data_offset.push_back(-1);
        Reserved.push_back(-1);
        flags.push_back("null");
        window_size.push_back(-1);
        tcp_checksum.push_back(-1);
        urgent_point.push_back(-1);

        typeof_icmp.push_back(-1);
        codeof_icmp.push_back(-1);
        icmp_checksum.push_back(-1);
        sequence_number_icmp.push_back(-1);

        typeof_hardware.push_back(-1);
        typeof_protosol.push_back(-1);
        hardware_address_length.push_back(-1);
        protosol_address_length.push_back(-1);
        opcode.push_back(-1);
        type.push_back("NULL");



    }
    else if(protocol_type=="TCP"){
        struct tcphdr *tcp_header = (struct tcphdr*)(packet + ETHER_HDR_LEN + ip_packet->ip_hl * 4);
        source_port.push_back(ntohs(tcp_header->th_sport));
        destination_port.push_back(ntohs(tcp_header->th_dport));
        sequence_number.push_back(ntohl(tcp_header->th_seq));
        acknowledge_number.push_back(ntohl(tcp_header->th_ack));
        data_offset.push_back(tcp_header->th_off);
        Reserved.push_back(tcp_header->th_x2);
        if(tcp_header->th_flags & TH_FIN) flags.push_back("FIN ");
        if(tcp_header->th_flags & TH_SYN) flags.push_back("SYN ");
        if(tcp_header->th_flags & TH_RST) flags.push_back("RST ");
        if(tcp_header->th_flags & TH_PUSH) flags.push_back("PUSH ");
        if(tcp_header->th_flags & TH_ACK) flags.push_back("ACK ");
        if(tcp_header->th_flags & TH_URG) flags.push_back("URG ");
        window_size.push_back(ntohs(tcp_header->th_win));
        tcp_checksum.push_back(ntohs(tcp_header->th_sum));
        urgent_point.push_back(ntohs(tcp_header->th_urp));


        udp_length.push_back(-1);
        udp_checksum.push_back(-1);

        typeof_icmp.push_back(-1);
        codeof_icmp.push_back(-1);
        icmp_checksum.push_back(-1);
        sequence_number_icmp.push_back(-1);

        typeof_hardware.push_back(-1);
        typeof_protosol.push_back(-1);
        hardware_address_length.push_back(-1);
        protosol_address_length.push_back(-1);
        opcode.push_back(-1);
        type.push_back("NULL");



    }
    else if(protocol_type=="ICMP"){

        struct icmphdr *icmp_header = (struct icmphdr*)(packet + ETHER_HDR_LEN + ip_packet->ip_hl * 4);
        typeof_icmp.push_back(icmp_header->type);
        codeof_icmp.push_back(icmp_header->code);
        icmp_checksum.push_back(ntohs(icmp_header->checksum));

        if(icmp_header->type == ICMP_ECHO || icmp_header->type == ICMP_ECHOREPLY){
            sequence_number_icmp.push_back(ntohs(icmp_header->un.echo.sequence));
        }


        source_port.push_back(-1);
        destination_port.push_back(-1);
        sequence_number.push_back(-1);
        acknowledge_number.push_back(-1);
        data_offset.push_back(-1);
        Reserved.push_back(-1);
        flags.push_back("null");
        window_size.push_back(-1);
        tcp_checksum.push_back(-1);
        urgent_point.push_back(-1);

        udp_length.push_back(-1);
        udp_checksum.push_back(-1);

        typeof_hardware.push_back(-1);
        typeof_protosol.push_back(-1);
        hardware_address_length.push_back(-1);
        protosol_address_length.push_back(-1);
        opcode.push_back(-1);
        type.push_back("NULL");
    }


    else if(protocol_type=="ARP"){


        struct arp_header *arp_header = (struct arp_header*)(packet + ETHER_HDR_LEN);
        typeof_hardware.push_back(ntohs(arp_header->arp_hardware_type));
        typeof_protosol.push_back(ntohs(arp_header->arp_protocol_type));
        hardware_address_length.push_back(arp_header->arp_hardware_len);
        protosol_address_length.push_back(arp_header->arp_protocol_len);
        opcode.push_back(ntohs(arp_header->arp_opcode));

        if(ntohs(arp_header->arp_opcode) == ARPOP_REQUEST) type.push_back("Request");
        else if(ntohs(arp_header->arp_opcode) == ARPOP_REPLY) type.push_back("Reply");
        else type.push_back("Unknown");


        source_port.push_back(-1);
        destination_port.push_back(-1);
        sequence_number.push_back(-1);
        acknowledge_number.push_back(-1);
        data_offset.push_back(-1);
        Reserved.push_back(-1);
        flags.push_back("null");
        window_size.push_back(-1);
        tcp_checksum.push_back(-1);
        urgent_point.push_back(-1);

        udp_length.push_back(-1);
        udp_checksum.push_back(-1);

        typeof_icmp.push_back(-1);
        codeof_icmp.push_back(-1);
        icmp_checksum.push_back(-1);
        sequence_number_icmp.push_back(-1);

    }
    else if(protocol_type=="OTHER"){


        source_port.push_back(-1);
        destination_port.push_back(-1);
        sequence_number.push_back(-1);
        acknowledge_number.push_back(-1);
        data_offset.push_back(-1);
        Reserved.push_back(-1);
        flags.push_back("null");
        window_size.push_back(-1);
        tcp_checksum.push_back(-1);
        urgent_point.push_back(-1);

        udp_length.push_back(-1);
        udp_checksum.push_back(-1);

        typeof_icmp.push_back(-1);
        codeof_icmp.push_back(-1);
        icmp_checksum.push_back(-1);
        sequence_number_icmp.push_back(-1);

        typeof_hardware.push_back(-1);
        typeof_protosol.push_back(-1);
        hardware_address_length.push_back(-1);
        protosol_address_length.push_back(-1);
        opcode.push_back(-1);
        type.push_back("NULL");

        srcMac="UNKONWN";
        dstMac="UNKONWN";
        srcIp="UNKONWN";
        dstIp="UNKONWN";

    }


   Packets.push_back(std::vector<u_char>(packet, packet + pkthdr->len));

   total_length.push_back(length);



    emit thread->addPacketInfo(number++, timeStr, length, protocolType, srcMac, dstMac, srcIp, dstIp);

}



void Widget::on_capture_start_clicked()
{
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t *handle;

    // 获取选中的设备名
    QString dev = ui->choose_device->currentText();


    // 打开设备
    handle = pcap_open_live(dev.toStdString().c_str(), BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        QMessageBox::warning(this, "Error", "Couldn't open device: " + QString(errbuf));
        return;
    }



    thread = new PacketCaptureThread(handle, this);
    connect(thread, &PacketCaptureThread::addPacketInfo, this, &Widget::onAddPacketInfo);
    thread->start();
}




void Widget::on_capture_stop_clicked() {
    if (thread != nullptr) {
        qDebug()<<"stop!!!";
        thread->stop();
        pcap_close(thread->getHandle());
        thread->wait(); // 等待线程结束
        delete thread;
        thread = nullptr;
    }
}



void Widget::on_result_save_clicked()
{
    // 创建一个文件对话框用于用户选择保存文件的位置和名称
    QString fileName = QFileDialog::getSaveFileName(this, tr("Save File"),
                                                    "/home",
                                                    tr("Text Files (*.txt)"));
    if (fileName.isEmpty())
        return; // 用户取消了保存

    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return; // 打开文件失败

    QTextStream out(&file);

    // 遍历QTreeWidget的所有项
    QTreeWidgetItemIterator it(ui->basic_information);
    QString str;
    while (*it) {
        for(int i = 0; i < (*it)->columnCount(); ++i) {
            out << (*it)->text(i); // 将每一项的文本写入到文件中
            const std::vector<u_char> &Packet = Packets[i];
            str = formatPacket(Packet);
            if(i < (*it)->columnCount() - 1)
                out << ", "; // 在每一项之间添加一个逗号作为分隔符
        }
        out << "\n"; // 在每一行的末尾添加一个换行符
        out << str;

        ++it;
    }
}


void Widget::on_packet_reassemble_clicked()
{
    int current_number;
    int last_number = ui->basic_information->topLevelItemCount() - 3;
    QTreeWidgetItem* currentItem = ui->basic_information->currentItem();
    if (currentItem != nullptr) {
        current_number = ui->basic_information->indexOfTopLevelItem(currentItem);
    } else {
        qDebug() << "No item selected.";
        return;
    }

    int target_id = ip_id[current_number];
    std::vector<u_char> reassembled_packet;

    if(target_id==-1){
        qDebug()<<"not ip";
        return;
    }
    for (int j = 0; j < last_number; ++j) {
            if (ip_id[j] == target_id) {
                number_of_same_id_packets.push_back(j);
            }
        }

    std::sort(number_of_same_id_packets.begin(), number_of_same_id_packets.end(), [&](int a, int b){
            return iP_fragment_offset[a] < iP_fragment_offset[b];
        });


    for (int j = 0; j < number_of_same_id_packets.size(); ++j) {
        if (j == 0) {
            reassembled_packet.insert(reassembled_packet.end(), Packets[number_of_same_id_packets[j]].begin(), Packets[number_of_same_id_packets[j]].end());
        } else {
            // 对于其他的包，只插入数据部分（即去掉IP头部）
            reassembled_packet.insert(reassembled_packet.end(), Packets[number_of_same_id_packets[j]].begin() + ip_header_length[number_of_same_id_packets[j]]*4+14, Packets[number_of_same_id_packets[j]].end());
        }
    }



    final_reassembled_packet = formatPacket(reassembled_packet);

    qDebug() << reassembled_packet.size();

    reassemble_result *newwidget =new reassemble_result;
    newwidget->show();



}










